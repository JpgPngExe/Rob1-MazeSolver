#include <Wire.h>
#include <Zumo32U4.h>

Zumo32U4Motors motors;
Zumo32U4LineSensors lineSensors;
Zumo32U4IMU imu;
Zumo32U4ButtonA buttonA;
Zumo32U4ButtonB buttonB;
Zumo32U4ButtonC buttonC;
Zumo32U4OLED display;

#define NUM_SENSORS 5
uint16_t lineSensorValues[NUM_SENSORS];
int s1, s2, s3;

#define LEFT "left"
#define RIGHT "right"

int speed = 150;
int threshold = 800;
long randNumber;
bool once = true;
bool calibrated = false;
bool aligned = false;
int leftThreshold;
int rightThreshold;
/* turnAngle is a 32-bit unsigned integer representing the amount
the robot has turned since the last time turnSensorReset was
called.  This is computed solely using the Z axis of the gyro, so
it could be inaccurate if the robot is rotated about the X or Y
axes.
Our convention is that a value of 0x20000000 represents a 45
degree counter-clockwise rotation.  This means that a uint32_t
can represent any angle between 0 degrees and 360 degrees.  If
you cast it to a signed 32-bit integer by writing
(int32_t)turnAngle, that integer can represent any angle between
-180 degrees and 180 degrees. */
uint32_t turnAngle = 0;

// turnRate is the current angular rate of the gyro, in units of
// 0.07 degrees per second.
int16_t turnRate;

// This is the average reading obtained from the gyro's Z axis
// during calibration.
int16_t gyroOffset;

// This variable helps us keep track of how much time has passed
// between readings of the gyro.
uint16_t gyroLastUpdate = 0;

int16_t largestValue = 0;
bool done;
void setup() 
{
  // put your setup code here, to run once:
  lineSensors.initFiveSensors();
  Serial.begin(9600);
  turnSensorSetup();
  delay(100);
  randomSeed(analogRead(0));
  readLineSensors();
  leftThreshold = lineSensorValues[0] + 200;
  rightThreshold = lineSensorValues[4] + 200;
  Serial.println(leftThreshold );
  Serial.println(rightThreshold );
  delay(2000);
}


void calibrateSensors()
{
  display.clear();

  // Wait 1 second and then begin automatic sensor calibration
  // by rotating in place to sweep the sensors over the line
  delay(1000);
  for(uint16_t i = 0; i < 60; i++)
  {
    if (i > 15 && i <= 45)
    {
      motors.setSpeeds(-100, 100);
    }
    else
    {
      motors.setSpeeds(100, -100);
    }

    lineSensors.calibrate();
  }
  readLineSensorsCalibrated();
  motors.setSpeeds(0, 0);

  delay(1000);
}

// the uncalibrated line sensor reading are between 0 (very bright) and 2000 (very dark)
void readLineSensorsCalibrated(){
  lineSensors.readCalibrated(lineSensorValues, QTR_EMITTERS_ON);
}
void readLineSensors(){
  lineSensors.read(lineSensorValues, QTR_EMITTERS_ON);
}

void stop(){
  motors.setSpeeds(0,0);
}

void forwards(int time){
  motors.setSpeeds(speed, speed);
  delay(time);
}

void loop() 
{
  readLineSensors();
  checkStartMaze();
  alignToMaze();
}

void printSensorValues()
{
  if(calibrated == false)
  {
    readLineSensors();
    display.gotoXY(0, 0);
    display.print(String(lineSensorValues[0]) + "    ");
    display.gotoXY(0, 1);
    display.print(String(lineSensorValues[4]) + "    ");
    Serial.println("Venstre Sensor: " + String(lineSensorValues[0]));
    Serial.println("Hojre Sensor: " + String(lineSensorValues[4]));
  }
  else
  {
    readLineSensorsCalibrated();
    display.gotoXY(0, 0);
    display.print(String(lineSensorValues[0]) + "    ");
    display.gotoXY(0, 1);
    display.print(String(lineSensorValues[4]) + "    ");
    Serial.println("Venstre Sensor: " + String(lineSensorValues[0]));
    Serial.println("Hojre Sensor: " + String(lineSensorValues[4]));
  }
}


void backwards(int time) {
  motors.setSpeeds(-speed, -speed);
  delay(time);
  stop();
  delay(200);

}

void turn(int degrees, String direction)
{
  int way;
  if (direction == RIGHT)
  {
    way = 1;
  }
  else if (direction == LEFT)
  {
    way = -1;
  } 
  turnSensorReset();
  motors.setSpeeds(way*speed, -way*speed);
  while(abs(getTurnAngleInDegrees()) < abs(degrees)) 
  {
    turnSensorUpdate();
    Serial.println(getTurnAngleInDegrees());
  }
  stop();
  delay(100);
}
void checkStartMaze()
{
  while(once)
  {
    printSensorValues();
    readLineSensors();
    forwards(0);
    if(lineSensorValues[0] >= leftThreshold || lineSensorValues[4] >= rightThreshold)
    {
      stop();
      delay(100);
      once = false;
     // calibrateSensors();
      motors.setSpeeds(-100,100);
      readLineSensorsCalibrated();
      while((lineSensorValues[0] >= leftThreshold || lineSensorValues[4] >= rightThreshold))
      {
        stop();
        return;
      }
    }
  }
}

void alignToMaze() 
{
  while(!aligned)
  {
    if (lineSensorValues[0] > lineSensorValues[4])
    {
      readLineSensorsCalibrated();
      Serial.println("lol");
      while(!(lineSensorValues[0] > leftThreshold && lineSensorValues[4] > rightThreshold))
      {
        backwards(100);
        turn(10,LEFT);
        forwards(0);
        readLineSensorsCalibrated();
        while(lineSensorValues[0] < leftThreshold || lineSensorValues[4] < rightThreshold)
        {
          Serial.println(lineSensorValues[0]);
          Serial.println(lineSensorValues[4]);
          Serial.println();
          readLineSensorsCalibrated();
          delay(50);
        }
        stop();
        readLineSensorsCalibrated();
      }
      stop();
      Serial.println("hej");
      printSensorValues();
      aligned = true;
    }
    else 
    {
      readLineSensorsCalibrated();
      Serial.println("tis");
      while(lineSensorValues[0] < leftThreshold && lineSensorValues[4] < rightThreshold)
      { 
        backwards(100);
        turn(10,RIGHT);
        forwards(0);
        readLineSensorsCalibrated();
        Serial.println("bob");
        while(lineSensorValues[0] < leftThreshold || lineSensorValues[4] < rightThreshold)
        {
          readLineSensorsCalibrated();
          Serial.println(lineSensorValues[0]);
          Serial.println(lineSensorValues[4]);
          delay(50);
          Serial.println("kage");
        }
        stop();
        readLineSensorsCalibrated();
      }
      stop();
      Serial.println("Kaj");
      printSensorValues();
      aligned = true;
    }
  }
  while(true);
}

void turnSensorSetup()
{
  Wire.begin();
  imu.init();
  imu.enableDefault();
  imu.configureForTurnSensing();

  display.clear();
  display.print(F("Gyro cal"));

  // Turn on the yellow LED in case the display is not available.
  ledYellow(1);

  // Delay to give the user time to remove their finger.
  delay(500);

  // Calibrate the gyro.
  int32_t total = 0;
  for (uint16_t i = 0; i < 1024; i++)
  {
    // Wait for new data to be available, then read it.
    while(!imu.gyroDataReady()) {}
    imu.readGyro();

    // Add the Z axis reading to the total.
    total += imu.g.z;
  }
  ledYellow(0);
  gyroOffset = total / 1024;

  // Display the angle (in degrees from -180 to 180) until the
  // user presses A.
  display.clear();
  turnSensorReset();
}

// This should be called to set the starting point for measuring
// a turn.  After calling this, turnAngle will be 0.
void turnSensorReset()
{
  gyroLastUpdate = micros();
  turnAngle = 0;
}

// Read the gyro and update the angle.  This should be called as
// frequently as possible while using the gyro to do turns.
void turnSensorUpdate()
{
  // Read the measurements from the gyro.
  imu.readGyro();
  turnRate = imu.g.z - gyroOffset;

  // Figure out how much time has passed since the last update (dt)
  uint16_t m = micros();
  uint16_t dt = m - gyroLastUpdate;
  gyroLastUpdate = m;

  // Multiply dt by turnRate in order to get an estimation of how
  // much the robot has turned since the last update.
  // (angular change = angular velocity * time)
  int32_t d = (int32_t)turnRate * dt;

  // The units of d are gyro digits times microseconds.  We need
  // to convert those to the units of turnAngle, where 2^29 units
  // represents 45 degrees.  The conversion from gyro digits to
  // degrees per second (dps) is determined by the sensitivity of
  // the gyro: 0.07 degrees per second per digit.
  //
  // (0.07 dps/digit) * (1/1000000 s/us) * (2^29/45 unit/degree)
  // = 14680064/17578125 unit/(digit*us)
  turnAngle += (int64_t)d * 14680064 / 17578125;
}

int32_t getTurnAngleInDegrees(){
  turnSensorUpdate();
  // do some math and pointer magic to turn angle in seconds to angle in degree
  return (((int32_t)turnAngle >> 16) * 360) >> 16;
}
